#if (NETSTANDARD2_0 || NET47)
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Net.Sockets;

namespace HSNXT
{
    public static partial class Extensions
	{
		/// <summary>
		/// Extends Send so that buffer offset of 0 and call to Array.Length are not needed.
		/// <example>
		/// socket.Send(buffer, socketFlags, errorCode);
		/// </example>
		/// </summary>
		public static Int32 Send(this Socket socket, Byte[] buffer, SocketFlags socketFlags, out SocketError errorCode)
		{
			if(socket == null) throw new ArgumentNullException("socket");

			if(buffer == null) throw new ArgumentNullException("buffer");

			return socket.Send(buffer, 0, buffer.Length, socketFlags, out errorCode);
		}

		/// <summary>
		/// Extends Receive so that buffer offset of 0 and call to Array.Length are not needed.
		/// <example>
		/// socket.Receive(buffer, socketFlags, errorCode);
		/// </example>
		/// </summary>
		public static Int32 Receive(this Socket socket, Byte[] buffer, SocketFlags socketFlags, out SocketError errorCode)
		{
			if(socket == null) throw new ArgumentNullException("socket");

			if(buffer == null) throw new ArgumentNullException("buffer");

			return socket.Receive(buffer, 0, buffer.Length, socketFlags, out errorCode);
		}

		/// <summary>
		/// Extends ReceiveMessageFrom so that buffer offset of 0 and call to Array.Length are not needed.
		/// <example>
		/// socket.ReceiveMessageFrom(buffer, socketFlags, remoteEP, ipPacketInformation);
		/// </example>
		/// </summary>
		public static Int32 ReceiveMessageFrom(this Socket socket, Byte[] buffer, ref SocketFlags socketFlags, ref System.Net.EndPoint remoteEP, out IPPacketInformation ipPacketInformation)
		{
			if(socket == null) throw new ArgumentNullException("socket");

			if(buffer == null) throw new ArgumentNullException("buffer");

			return socket.ReceiveMessageFrom(buffer, 0, buffer.Length, ref socketFlags, ref remoteEP, out ipPacketInformation);
		}

		/// <summary>
		/// Extends BeginSendFile so that when a state object is not needed, null does not need to be passed.
		/// <example>
		/// socket.BeginSendFile(fileName, callback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginSendFile(this Socket socket, String fileName, AsyncCallback callback)
		{
			if(socket == null) throw new ArgumentNullException("socket");

			return socket.BeginSendFile(fileName, callback, null);
		}

		/// <summary>
		/// Extends BeginConnect so that when a state object is not needed, null does not need to be passed.
		/// <example>
		/// socket.BeginConnect(remoteEP, callback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginConnect(this Socket socket, System.Net.EndPoint remoteEP, AsyncCallback callback)
		{
			if(socket == null) throw new ArgumentNullException("socket");

			return socket.BeginConnect(remoteEP, callback, null);
		}

		/// <summary>
		/// Extends BeginConnect so that when a state object is not needed, null does not need to be passed.
		/// <example>
		/// socket.BeginConnect(host, port, requestCallback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginConnect(this Socket socket, String host, Int32 port, AsyncCallback requestCallback)
		{
			if(socket == null) throw new ArgumentNullException("socket");

			return socket.BeginConnect(host, port, requestCallback, null);
		}

		/// <summary>
		/// Extends BeginConnect so that when a state object is not needed, null does not need to be passed.
		/// <example>
		/// socket.BeginConnect(address, port, requestCallback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginConnect(this Socket socket, System.Net.IPAddress address, Int32 port, AsyncCallback requestCallback)
		{
			if(socket == null) throw new ArgumentNullException("socket");

			return socket.BeginConnect(address, port, requestCallback, null);
		}

		/// <summary>
		/// Extends BeginConnect so that when a state object is not needed, null does not need to be passed.
		/// <example>
		/// socket.BeginConnect(addresses, port, requestCallback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginConnect(this Socket socket, System.Net.IPAddress[] addresses, Int32 port, AsyncCallback requestCallback)
		{
			if(socket == null) throw new ArgumentNullException("socket");

			return socket.BeginConnect(addresses, port, requestCallback, null);
		}

		/// <summary>
		/// Extends BeginDisconnect so that when a state object is not needed, null does not need to be passed.
		/// <example>
		/// socket.BeginDisconnect(reuseSocket, callback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginDisconnect(this Socket socket, Boolean reuseSocket, AsyncCallback callback)
		{
			if(socket == null) throw new ArgumentNullException("socket");

			return socket.BeginDisconnect(reuseSocket, callback, null);
		}

		/// <summary>
		/// Extends BeginSend so that buffer offset of 0 and call to Array.Length are not needed.
		/// <example>
		/// socket.BeginSend(buffer, socketFlags, callback, state);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginSend(this Socket socket, Byte[] buffer, SocketFlags socketFlags, AsyncCallback callback, Object state)
		{
			if(socket == null) throw new ArgumentNullException("socket");

			if(buffer == null) throw new ArgumentNullException("buffer");

			return socket.BeginSend(buffer, 0, buffer.Length, socketFlags, callback, state);
		}

		/// <summary>
		/// Extends BeginSend so that when a state object is not needed, null does not need to be passed.
		/// <example>
		/// socket.BeginSend(buffer, offset, size, socketFlags, callback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginSend(this Socket socket, Byte[] buffer, Int32 offset, Int32 size, SocketFlags socketFlags, AsyncCallback callback)
		{
			if(socket == null) throw new ArgumentNullException("socket");

			return socket.BeginSend(buffer, offset, size, socketFlags, callback, null);
		}

		/// <summary>
		/// Extends BeginSend so that buffer offset of 0 and call to Array.Length are not needed.
		/// <example>
		/// socket.BeginSend(buffer, socketFlags, callback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginSend(this Socket socket, Byte[] buffer, SocketFlags socketFlags, AsyncCallback callback)
		{
			if(socket == null) throw new ArgumentNullException("socket");

			if(buffer == null) throw new ArgumentNullException("buffer");

			return socket.BeginSend(buffer, 0, buffer.Length, socketFlags, callback);
		}

		/// <summary>
		/// Extends BeginSend so that buffer offset of 0 and call to Array.Length are not needed.
		/// <example>
		/// socket.BeginSend(buffer, socketFlags, errorCode, callback, state);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginSend(this Socket socket, Byte[] buffer, SocketFlags socketFlags, out SocketError errorCode, AsyncCallback callback, Object state)
		{
			if(socket == null) throw new ArgumentNullException("socket");

			if(buffer == null) throw new ArgumentNullException("buffer");

			return socket.BeginSend(buffer, 0, buffer.Length, socketFlags, out errorCode, callback, state);
		}

		/// <summary>
		/// Extends BeginSend so that when a state object is not needed, null does not need to be passed.
		/// <example>
		/// socket.BeginSend(buffer, offset, size, socketFlags, errorCode, callback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginSend(this Socket socket, Byte[] buffer, Int32 offset, Int32 size, SocketFlags socketFlags, out SocketError errorCode, AsyncCallback callback)
		{
			if(socket == null) throw new ArgumentNullException("socket");

			return socket.BeginSend(buffer, offset, size, socketFlags, out errorCode, callback, null);
		}

		/// <summary>
		/// Extends BeginSend so that buffer offset of 0 and call to Array.Length are not needed.
		/// <example>
		/// socket.BeginSend(buffer, socketFlags, errorCode, callback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginSend(this Socket socket, Byte[] buffer, SocketFlags socketFlags, out SocketError errorCode, AsyncCallback callback)
		{
			if(socket == null) throw new ArgumentNullException("socket");

			if(buffer == null) throw new ArgumentNullException("buffer");

			return socket.BeginSend(buffer, 0, buffer.Length, socketFlags, out errorCode, callback);
		}

		/// <summary>
		/// Extends BeginSendFile so that when a state object is not needed, null does not need to be passed.
		/// <example>
		/// socket.BeginSendFile(fileName, preBuffer, postBuffer, flags, callback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginSendFile(this Socket socket, String fileName, Byte[] preBuffer, Byte[] postBuffer, TransmitFileOptions flags, AsyncCallback callback)
		{
			if(socket == null) throw new ArgumentNullException("socket");

			return socket.BeginSendFile(fileName, preBuffer, postBuffer, flags, callback, null);
		}

		/// <summary>
		/// Extends BeginSend so that when a state object is not needed, null does not need to be passed.
		/// <example>
		/// socket.BeginSend(buffers, socketFlags, callback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginSend(this Socket socket, System.Collections.Generic.IList<ArraySegment<Byte>> buffers, SocketFlags socketFlags, AsyncCallback callback)
		{
			if(socket == null) throw new ArgumentNullException("socket");

			return socket.BeginSend(buffers, socketFlags, callback, null);
		}

		/// <summary>
		/// Extends BeginSend so that when a state object is not needed, null does not need to be passed.
		/// <example>
		/// socket.BeginSend(buffers, socketFlags, errorCode, callback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginSend(this Socket socket, System.Collections.Generic.IList<ArraySegment<Byte>> buffers, SocketFlags socketFlags, out SocketError errorCode, AsyncCallback callback)
		{
			if(socket == null) throw new ArgumentNullException("socket");

			return socket.BeginSend(buffers, socketFlags, out errorCode, callback, null);
		}

		/// <summary>
		/// Extends BeginSendTo so that buffer offset of 0 and call to Array.Length are not needed.
		/// <example>
		/// socket.BeginSendTo(buffer, socketFlags, remoteEP, callback, state);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginSendTo(this Socket socket, Byte[] buffer, SocketFlags socketFlags, System.Net.EndPoint remoteEP, AsyncCallback callback, Object state)
		{
			if(socket == null) throw new ArgumentNullException("socket");

			if(buffer == null) throw new ArgumentNullException("buffer");

			return socket.BeginSendTo(buffer, 0, buffer.Length, socketFlags, remoteEP, callback, state);
		}

		/// <summary>
		/// Extends BeginSendTo so that when a state object is not needed, null does not need to be passed.
		/// <example>
		/// socket.BeginSendTo(buffer, offset, size, socketFlags, remoteEP, callback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginSendTo(this Socket socket, Byte[] buffer, Int32 offset, Int32 size, SocketFlags socketFlags, System.Net.EndPoint remoteEP, AsyncCallback callback)
		{
			if(socket == null) throw new ArgumentNullException("socket");

			return socket.BeginSendTo(buffer, offset, size, socketFlags, remoteEP, callback, null);
		}

		/// <summary>
		/// Extends BeginSendTo so that buffer offset of 0 and call to Array.Length are not needed.
		/// <example>
		/// socket.BeginSendTo(buffer, socketFlags, remoteEP, callback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginSendTo(this Socket socket, Byte[] buffer, SocketFlags socketFlags, System.Net.EndPoint remoteEP, AsyncCallback callback)
		{
			if(socket == null) throw new ArgumentNullException("socket");

			if(buffer == null) throw new ArgumentNullException("buffer");

			return socket.BeginSendTo(buffer, 0, buffer.Length, socketFlags, remoteEP, callback);
		}

		/// <summary>
		/// Extends BeginReceive so that buffer offset of 0 and call to Array.Length are not needed.
		/// <example>
		/// socket.BeginReceive(buffer, socketFlags, callback, state);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginReceive(this Socket socket, Byte[] buffer, SocketFlags socketFlags, AsyncCallback callback, Object state)
		{
			if(socket == null) throw new ArgumentNullException("socket");

			if(buffer == null) throw new ArgumentNullException("buffer");

			return socket.BeginReceive(buffer, 0, buffer.Length, socketFlags, callback, state);
		}

		/// <summary>
		/// Extends BeginReceive so that when a state object is not needed, null does not need to be passed.
		/// <example>
		/// socket.BeginReceive(buffer, offset, size, socketFlags, callback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginReceive(this Socket socket, Byte[] buffer, Int32 offset, Int32 size, SocketFlags socketFlags, AsyncCallback callback)
		{
			if(socket == null) throw new ArgumentNullException("socket");

			return socket.BeginReceive(buffer, offset, size, socketFlags, callback, null);
		}

		/// <summary>
		/// Extends BeginReceive so that buffer offset of 0 and call to Array.Length are not needed.
		/// <example>
		/// socket.BeginReceive(buffer, socketFlags, callback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginReceive(this Socket socket, Byte[] buffer, SocketFlags socketFlags, AsyncCallback callback)
		{
			if(socket == null) throw new ArgumentNullException("socket");

			if(buffer == null) throw new ArgumentNullException("buffer");

			return socket.BeginReceive(buffer, 0, buffer.Length, socketFlags, callback);
		}

		/// <summary>
		/// Extends BeginReceive so that buffer offset of 0 and call to Array.Length are not needed.
		/// <example>
		/// socket.BeginReceive(buffer, socketFlags, errorCode, callback, state);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginReceive(this Socket socket, Byte[] buffer, SocketFlags socketFlags, out SocketError errorCode, AsyncCallback callback, Object state)
		{
			if(socket == null) throw new ArgumentNullException("socket");

			if(buffer == null) throw new ArgumentNullException("buffer");

			return socket.BeginReceive(buffer, 0, buffer.Length, socketFlags, out errorCode, callback, state);
		}

		/// <summary>
		/// Extends BeginReceive so that when a state object is not needed, null does not need to be passed.
		/// <example>
		/// socket.BeginReceive(buffer, offset, size, socketFlags, errorCode, callback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginReceive(this Socket socket, Byte[] buffer, Int32 offset, Int32 size, SocketFlags socketFlags, out SocketError errorCode, AsyncCallback callback)
		{
			if(socket == null) throw new ArgumentNullException("socket");

			return socket.BeginReceive(buffer, offset, size, socketFlags, out errorCode, callback, null);
		}

		/// <summary>
		/// Extends BeginReceive so that buffer offset of 0 and call to Array.Length are not needed.
		/// <example>
		/// socket.BeginReceive(buffer, socketFlags, errorCode, callback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginReceive(this Socket socket, Byte[] buffer, SocketFlags socketFlags, out SocketError errorCode, AsyncCallback callback)
		{
			if(socket == null) throw new ArgumentNullException("socket");

			if(buffer == null) throw new ArgumentNullException("buffer");

			return socket.BeginReceive(buffer, 0, buffer.Length, socketFlags, out errorCode, callback);
		}

		/// <summary>
		/// Extends BeginReceive so that when a state object is not needed, null does not need to be passed.
		/// <example>
		/// socket.BeginReceive(buffers, socketFlags, callback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginReceive(this Socket socket, System.Collections.Generic.IList<ArraySegment<Byte>> buffers, SocketFlags socketFlags, AsyncCallback callback)
		{
			if(socket == null) throw new ArgumentNullException("socket");

			return socket.BeginReceive(buffers, socketFlags, callback, null);
		}

		/// <summary>
		/// Extends BeginReceive so that when a state object is not needed, null does not need to be passed.
		/// <example>
		/// socket.BeginReceive(buffers, socketFlags, errorCode, callback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginReceive(this Socket socket, System.Collections.Generic.IList<ArraySegment<Byte>> buffers, SocketFlags socketFlags, out SocketError errorCode, AsyncCallback callback)
		{
			if(socket == null) throw new ArgumentNullException("socket");

			return socket.BeginReceive(buffers, socketFlags, out errorCode, callback, null);
		}

		/// <summary>
		/// Extends BeginReceiveMessageFrom so that buffer offset of 0 and call to Array.Length are not needed.
		/// <example>
		/// socket.BeginReceiveMessageFrom(buffer, socketFlags, remoteEP, callback, state);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginReceiveMessageFrom(this Socket socket, Byte[] buffer, SocketFlags socketFlags, ref System.Net.EndPoint remoteEP, AsyncCallback callback, Object state)
		{
			if(socket == null) throw new ArgumentNullException("socket");

			if(buffer == null) throw new ArgumentNullException("buffer");

			return socket.BeginReceiveMessageFrom(buffer, 0, buffer.Length, socketFlags, ref remoteEP, callback, state);
		}

		/// <summary>
		/// Extends BeginReceiveMessageFrom so that when a state object is not needed, null does not need to be passed.
		/// <example>
		/// socket.BeginReceiveMessageFrom(buffer, offset, size, socketFlags, remoteEP, callback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginReceiveMessageFrom(this Socket socket, Byte[] buffer, Int32 offset, Int32 size, SocketFlags socketFlags, ref System.Net.EndPoint remoteEP, AsyncCallback callback)
		{
			if(socket == null) throw new ArgumentNullException("socket");

			return socket.BeginReceiveMessageFrom(buffer, offset, size, socketFlags, ref remoteEP, callback, null);
		}

		/// <summary>
		/// Extends BeginReceiveMessageFrom so that buffer offset of 0 and call to Array.Length are not needed.
		/// <example>
		/// socket.BeginReceiveMessageFrom(buffer, socketFlags, remoteEP, callback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginReceiveMessageFrom(this Socket socket, Byte[] buffer, SocketFlags socketFlags, ref System.Net.EndPoint remoteEP, AsyncCallback callback)
		{
			if(socket == null) throw new ArgumentNullException("socket");

			if(buffer == null) throw new ArgumentNullException("buffer");

			return socket.BeginReceiveMessageFrom(buffer, 0, buffer.Length, socketFlags, ref remoteEP, callback);
		}

		/// <summary>
		/// Extends BeginReceiveFrom so that buffer offset of 0 and call to Array.Length are not needed.
		/// <example>
		/// socket.BeginReceiveFrom(buffer, socketFlags, remoteEP, callback, state);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginReceiveFrom(this Socket socket, Byte[] buffer, SocketFlags socketFlags, ref System.Net.EndPoint remoteEP, AsyncCallback callback, Object state)
		{
			if(socket == null) throw new ArgumentNullException("socket");

			if(buffer == null) throw new ArgumentNullException("buffer");

			return socket.BeginReceiveFrom(buffer, 0, buffer.Length, socketFlags, ref remoteEP, callback, state);
		}

		/// <summary>
		/// Extends BeginReceiveFrom so that when a state object is not needed, null does not need to be passed.
		/// <example>
		/// socket.BeginReceiveFrom(buffer, offset, size, socketFlags, remoteEP, callback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginReceiveFrom(this Socket socket, Byte[] buffer, Int32 offset, Int32 size, SocketFlags socketFlags, ref System.Net.EndPoint remoteEP, AsyncCallback callback)
		{
			if(socket == null) throw new ArgumentNullException("socket");

			return socket.BeginReceiveFrom(buffer, offset, size, socketFlags, ref remoteEP, callback, null);
		}

		/// <summary>
		/// Extends BeginReceiveFrom so that buffer offset of 0 and call to Array.Length are not needed.
		/// <example>
		/// socket.BeginReceiveFrom(buffer, socketFlags, remoteEP, callback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginReceiveFrom(this Socket socket, Byte[] buffer, SocketFlags socketFlags, ref System.Net.EndPoint remoteEP, AsyncCallback callback)
		{
			if(socket == null) throw new ArgumentNullException("socket");

			if(buffer == null) throw new ArgumentNullException("buffer");

			return socket.BeginReceiveFrom(buffer, 0, buffer.Length, socketFlags, ref remoteEP, callback);
		}

		/// <summary>
		/// Extends BeginAccept so that when a state object is not needed, null does not need to be passed.
		/// <example>
		/// socket.BeginAccept(callback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginAccept(this Socket socket, AsyncCallback callback)
		{
			if(socket == null) throw new ArgumentNullException("socket");

			return socket.BeginAccept(callback, null);
		}

		/// <summary>
		/// Extends BeginAccept so that when a state object is not needed, null does not need to be passed.
		/// <example>
		/// socket.BeginAccept(receiveSize, callback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginAccept(this Socket socket, Int32 receiveSize, AsyncCallback callback)
		{
			if(socket == null) throw new ArgumentNullException("socket");

			return socket.BeginAccept(receiveSize, callback, null);
		}

		/// <summary>
		/// Extends BeginAccept so that when a state object is not needed, null does not need to be passed.
		/// <example>
		/// socket.BeginAccept(acceptSocket, receiveSize, callback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginAccept(this Socket socket, Socket acceptSocket, Int32 receiveSize, AsyncCallback callback)
		{
			if(socket == null) throw new ArgumentNullException("socket");

			return socket.BeginAccept(acceptSocket, receiveSize, callback, null);
		}

	}
}
#endif