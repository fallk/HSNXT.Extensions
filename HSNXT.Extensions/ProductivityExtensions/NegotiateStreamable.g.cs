#if (NETSTANDARD2_0 || NET45 || NET40 || NET451 || NET452 || NET46 || NET461 || NET462)
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Net.Security;

namespace HSNXT
{
    public static partial class Extensions
	{
		/// <summary>
		/// Extends BeginAuthenticateAsClient so that when a state object is not needed, null does not need to be passed.
		/// <example>
		/// negotiatestream.BeginAuthenticateAsClient(asyncCallback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginAuthenticateAsClient(this NegotiateStream negotiatestream, AsyncCallback asyncCallback)
		{
			if(negotiatestream == null) throw new ArgumentNullException("negotiatestream");

			return negotiatestream.BeginAuthenticateAsClient(asyncCallback, null);
		}

		/// <summary>
		/// Extends BeginAuthenticateAsClient so that when a state object is not needed, null does not need to be passed.
		/// <example>
		/// negotiatestream.BeginAuthenticateAsClient(credential, targetName, asyncCallback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginAuthenticateAsClient(this NegotiateStream negotiatestream, System.Net.NetworkCredential credential, String targetName, AsyncCallback asyncCallback)
		{
			if(negotiatestream == null) throw new ArgumentNullException("negotiatestream");

			return negotiatestream.BeginAuthenticateAsClient(credential, targetName, asyncCallback, null);
		}

		/// <summary>
		/// Extends BeginAuthenticateAsClient so that when a state object is not needed, null does not need to be passed.
		/// <example>
		/// negotiatestream.BeginAuthenticateAsClient(credential, binding, targetName, asyncCallback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginAuthenticateAsClient(this NegotiateStream negotiatestream, System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, String targetName, AsyncCallback asyncCallback)
		{
			if(negotiatestream == null) throw new ArgumentNullException("negotiatestream");

			return negotiatestream.BeginAuthenticateAsClient(credential, binding, targetName, asyncCallback, null);
		}

		/// <summary>
		/// Extends BeginAuthenticateAsClient so that when a state object is not needed, null does not need to be passed.
		/// <example>
		/// negotiatestream.BeginAuthenticateAsClient(credential, targetName, requiredProtectionLevel, allowedImpersonationLevel, asyncCallback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginAuthenticateAsClient(this NegotiateStream negotiatestream, System.Net.NetworkCredential credential, String targetName, ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback asyncCallback)
		{
			if(negotiatestream == null) throw new ArgumentNullException("negotiatestream");

			return negotiatestream.BeginAuthenticateAsClient(credential, targetName, requiredProtectionLevel, allowedImpersonationLevel, asyncCallback, null);
		}

		/// <summary>
		/// Extends BeginAuthenticateAsClient so that when a state object is not needed, null does not need to be passed.
		/// <example>
		/// negotiatestream.BeginAuthenticateAsClient(credential, binding, targetName, requiredProtectionLevel, allowedImpersonationLevel, asyncCallback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginAuthenticateAsClient(this NegotiateStream negotiatestream, System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, String targetName, ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback asyncCallback)
		{
			if(negotiatestream == null) throw new ArgumentNullException("negotiatestream");

			return negotiatestream.BeginAuthenticateAsClient(credential, binding, targetName, requiredProtectionLevel, allowedImpersonationLevel, asyncCallback, null);
		}

		/// <summary>
		/// Extends BeginAuthenticateAsServer so that when a state object is not needed, null does not need to be passed.
		/// <example>
		/// negotiatestream.BeginAuthenticateAsServer(asyncCallback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginAuthenticateAsServer(this NegotiateStream negotiatestream, AsyncCallback asyncCallback)
		{
			if(negotiatestream == null) throw new ArgumentNullException("negotiatestream");

			return negotiatestream.BeginAuthenticateAsServer(asyncCallback, null);
		}

		/// <summary>
		/// Extends BeginAuthenticateAsServer so that when a state object is not needed, null does not need to be passed.
		/// <example>
		/// negotiatestream.BeginAuthenticateAsServer(policy, asyncCallback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginAuthenticateAsServer(this NegotiateStream negotiatestream, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, AsyncCallback asyncCallback)
		{
			if(negotiatestream == null) throw new ArgumentNullException("negotiatestream");

			return negotiatestream.BeginAuthenticateAsServer(policy, asyncCallback, null);
		}

		/// <summary>
		/// Extends BeginAuthenticateAsServer so that when a state object is not needed, null does not need to be passed.
		/// <example>
		/// negotiatestream.BeginAuthenticateAsServer(credential, requiredProtectionLevel, requiredImpersonationLevel, asyncCallback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginAuthenticateAsServer(this NegotiateStream negotiatestream, System.Net.NetworkCredential credential, ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback asyncCallback)
		{
			if(negotiatestream == null) throw new ArgumentNullException("negotiatestream");

			return negotiatestream.BeginAuthenticateAsServer(credential, requiredProtectionLevel, requiredImpersonationLevel, asyncCallback, null);
		}

		/// <summary>
		/// Extends BeginAuthenticateAsServer so that when a state object is not needed, null does not need to be passed.
		/// <example>
		/// negotiatestream.BeginAuthenticateAsServer(credential, policy, requiredProtectionLevel, requiredImpersonationLevel, asyncCallback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginAuthenticateAsServer(this NegotiateStream negotiatestream, System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback asyncCallback)
		{
			if(negotiatestream == null) throw new ArgumentNullException("negotiatestream");

			return negotiatestream.BeginAuthenticateAsServer(credential, policy, requiredProtectionLevel, requiredImpersonationLevel, asyncCallback, null);
		}

		/// <summary>
		/// Extends BeginRead so that when a state object is not needed, null does not need to be passed.
		/// <example>
		/// negotiatestream.BeginRead(buffer, offset, count, asyncCallback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginRead(this NegotiateStream negotiatestream, Byte[] buffer, Int32 offset, Int32 count, AsyncCallback asyncCallback)
		{
			if(negotiatestream == null) throw new ArgumentNullException("negotiatestream");

			return negotiatestream.BeginRead(buffer, offset, count, asyncCallback, null);
		}

		/// <summary>
		/// Extends BeginRead so that buffer offset of 0 and call to Array.Length are not needed.
		/// <example>
		/// negotiatestream.BeginRead(buffer, asyncCallback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginRead(this NegotiateStream negotiatestream, Byte[] buffer, AsyncCallback asyncCallback)
		{
			if(negotiatestream == null) throw new ArgumentNullException("negotiatestream");

			if(buffer == null) throw new ArgumentNullException("buffer");

			return negotiatestream.BeginRead(buffer, 0, buffer.Length, asyncCallback);
		}

		/// <summary>
		/// Extends BeginWrite so that when a state object is not needed, null does not need to be passed.
		/// <example>
		/// negotiatestream.BeginWrite(buffer, offset, count, asyncCallback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginWrite(this NegotiateStream negotiatestream, Byte[] buffer, Int32 offset, Int32 count, AsyncCallback asyncCallback)
		{
			if(negotiatestream == null) throw new ArgumentNullException("negotiatestream");

			return negotiatestream.BeginWrite(buffer, offset, count, asyncCallback, null);
		}

		/// <summary>
		/// Extends BeginWrite so that buffer offset of 0 and call to Array.Length are not needed.
		/// <example>
		/// negotiatestream.BeginWrite(buffer, asyncCallback);
		/// </example>
		/// </summary>
		public static IAsyncResult BeginWrite(this NegotiateStream negotiatestream, Byte[] buffer, AsyncCallback asyncCallback)
		{
			if(negotiatestream == null) throw new ArgumentNullException("negotiatestream");

			if(buffer == null) throw new ArgumentNullException("buffer");

			return negotiatestream.BeginWrite(buffer, 0, buffer.Length, asyncCallback);
		}

	}
}
#endif